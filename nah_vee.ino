/*********************************************************************
This is an example sketch for our Monochrome Nokia 5110 LCD Displays

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/products/338

These displays use SPI to communicate, 4 or 5 pins are required to  
interface

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>

// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

#define NUMFLAKES 1
#define XPOS 0
#define YPOS 1
#define DELTAY 2


#define NahVee_HEIGHT 32 
#define NahVee_WIDTH  32 
#define NahVee_FRAMES 6

static unsigned char __attribute__ ((progmem)) NahVee [NahVee_FRAMES][128] = {{
  0x00, 0x3C, 0xC2, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x04, 0x02, 0x02, 0x02, 0xC2, 0x3C, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x10, 0x20, 0x20, 0x70, 0xFC, 0xFE, 0xFF, 0x07, 0x8B, 0x03,
  0x03, 0x8B, 0x07, 0xFF, 0xFE, 0xFC, 0x70, 0x20, 0x20, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x41, 0x43, 0x47, 0x27, 0x1E, 0x0E,
  0x0E, 0x1E, 0x27, 0x47, 0x43, 0x41, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
},{
  0x00, 0x00, 0x78, 0x84, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x84, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x06, 0x08, 0x10, 0x20, 0x20, 0x70, 0xFC, 0xFE, 0xFF, 0x07, 0x8B, 0x03,
  0x03, 0x8B, 0x07, 0xFF, 0xFE, 0xFC, 0x70, 0x20, 0x20, 0x10, 0x08, 0x06, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x23, 0x27, 0x27, 0x1E, 0x0E,
  0x0E, 0x1E, 0x27, 0x27, 0x23, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}, {
  0x00, 0x00, 0x00, 0xF0, 0x08, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, 0x40, 0x80, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x80, 0x40, 0x20, 0x10, 0x10, 0x08, 0x08, 0x08, 0x08, 0xF0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x10, 0x20, 0x70, 0xFC, 0xFE, 0xFF, 0x07, 0x8B, 0x03,
  0x03, 0x8B, 0x07, 0xFF, 0xFE, 0xFC, 0x70, 0x20, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0B, 0x17, 0x17, 0x0E, 0x0E,
  0x0E, 0x0E, 0x17, 0x17, 0x0B, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}, {
  0x00, 0x00, 0x78, 0x84, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x84, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x06, 0x08, 0x10, 0x20, 0x20, 0x70, 0xFC, 0xFE, 0xFF, 0x07, 0x8B, 0x03,
  0x03, 0x8B, 0x07, 0xFF, 0xFE, 0xFC, 0x70, 0x20, 0x20, 0x10, 0x08, 0x06, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0x23, 0x27, 0x27, 0x1E, 0x0E,
  0x0E, 0x1E, 0x27, 0x27, 0x23, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}, {
  0x00, 0x3C, 0xC2, 0x02, 0x02, 0x02, 0x04, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x04, 0x02, 0x02, 0x02, 0xC2, 0x3C, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x10, 0x20, 0x20, 0x70, 0xFC, 0xFE, 0xFF, 0x07, 0x8B, 0x03,
  0x03, 0x8B, 0x07, 0xFF, 0xFE, 0xFC, 0x70, 0x20, 0x20, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x41, 0x43, 0x47, 0x27, 0x1E, 0x0E,
  0x0E, 0x1E, 0x27, 0x47, 0x43, 0x41, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}, {
  0x1E, 0x61, 0x81, 0x01, 0x01, 0x02, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x80, 0x80,
  0x80, 0x80, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x02, 0x01, 0x01, 0x81, 0x61, 0x1E,
  0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x20, 0x70, 0xFC, 0xFE, 0xFF, 0x07, 0x8B, 0x03,
  0x03, 0x8B, 0x07, 0xFF, 0xFE, 0xFC, 0x70, 0x20, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x86, 0x81, 0x83, 0x47, 0x27, 0x1E, 0x0E,
  0x0E, 0x1E, 0x27, 0x47, 0x83, 0x81, 0x86, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x05, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}};

uint8_t curFrame=0;
uint8_t yPos=0;
int8_t yDir=1;

void setup()   {                
  display.begin();
  display.setContrast(60);

  display.display(); // show splashscreen
  delay(2000);
  display.clearDisplay();   // clears the screen and buffer
}


void loop() {
  if(++curFrame >= NahVee_FRAMES)
    curFrame = 0;
    
  yPos+=yDir;
  if(yPos >= 20 || yPos <= 0)
    yDir*=-1;
  
  display.drawBitmap(32, yPos, NahVee[curFrame], NahVee_WIDTH, NahVee_HEIGHT, BLACK);
  display.display();
  delay(100);
  display.drawBitmap(32, yPos, NahVee[curFrame], NahVee_WIDTH, NahVee_HEIGHT, WHITE);
}
